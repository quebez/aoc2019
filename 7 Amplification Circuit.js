'use strict'

require('./intcode.js');
let fs = require('fs');
let file = './7.txt';
let input = fs.readFileSync(file, 'utf8').split(',').map(v => parseInt(v));
//let input = '3,31,3,32,1002,32,10,32,1001,31,-2,31,1007,31,0,33,1002,33,7,33,1,33,31,31,1,32,31,31,4,31,99,0,0,0'.split(',').map(v => parseInt(v));


/************* FIRST TASK *************/
let first = (arr) => {
  let res = [];

  let combos = [[0, 1, 2, 3, 4],
  [0, 1, 2, 4, 3],
  [0, 1, 3, 4, 2],
  [0, 1, 3, 2, 4],
  [0, 1, 4, 2, 3],
  [0, 1, 4, 3, 2],
  [0, 2, 0, 3, 4],
  [0, 2, 0, 4, 3],
  [0, 2, 3, 4, 0],
  [0, 2, 3, 0, 4],
  [0, 2, 4, 0, 3],
  [0, 2, 4, 3, 0],
  [0, 3, 0, 2, 4],
  [0, 3, 0, 4, 2],
  [0, 3, 2, 4, 0],
  [0, 3, 2, 0, 4],
  [0, 3, 4, 0, 2],
  [0, 3, 4, 2, 0],
  [0, 4, 0, 2, 3],
  [0, 4, 0, 3, 2],
  [0, 4, 2, 3, 0],
  [0, 4, 2, 0, 3],
  [0, 4, 3, 0, 2],
  [0, 4, 3, 2, 0],
  [1, 0, 2, 3, 4],
  [1, 0, 2, 4, 3],
  [1, 0, 3, 4, 2],
  [1, 0, 3, 2, 4],
  [1, 0, 4, 2, 3],
  [1, 0, 4, 3, 2],
  [1, 2, 0, 3, 4],
  [1, 2, 0, 4, 3],
  [1, 2, 3, 4, 0],
  [1, 2, 3, 0, 4],
  [1, 2, 4, 0, 3],
  [1, 2, 4, 3, 0],
  [1, 3, 0, 2, 4],
  [1, 3, 0, 4, 2],
  [1, 3, 2, 4, 0],
  [1, 3, 2, 0, 4],
  [1, 3, 4, 0, 2],
  [1, 3, 4, 2, 0],
  [1, 4, 0, 2, 3],
  [1, 4, 0, 3, 2],
  [1, 4, 2, 3, 0],
  [1, 4, 2, 0, 3],
  [1, 4, 3, 0, 2],
  [1, 4, 3, 2, 0],
  [2, 0, 1, 3, 4],
  [2, 0, 1, 4, 3],
  [2, 0, 3, 4, 1],
  [2, 0, 3, 1, 4],
  [2, 0, 4, 1, 3],
  [2, 0, 4, 3, 1],
  [2, 1, 0, 3, 4],
  [2, 1, 0, 4, 3],
  [2, 1, 3, 4, 0],
  [2, 1, 3, 0, 4],
  [2, 1, 4, 0, 3],
  [2, 1, 4, 3, 0],
  [2, 3, 0, 1, 4],
  [2, 3, 0, 4, 1],
  [2, 3, 1, 4, 0],
  [2, 3, 1, 0, 4],
  [2, 3, 4, 0, 1],
  [2, 3, 4, 1, 0],
  [2, 4, 0, 1, 3],
  [2, 4, 0, 3, 1],
  [2, 4, 1, 3, 0],
  [2, 4, 1, 0, 3],
  [2, 4, 3, 0, 1],
  [2, 4, 3, 1, 0],
  [3, 0, 1, 2, 4],
  [3, 0, 1, 4, 2],
  [3, 0, 2, 4, 1],
  [3, 0, 2, 1, 4],
  [3, 0, 4, 1, 2],
  [3, 0, 4, 2, 1],
  [3, 1, 0, 2, 4],
  [3, 1, 0, 4, 2],
  [3, 1, 2, 4, 0],
  [3, 1, 2, 0, 4],
  [3, 1, 4, 0, 2],
  [3, 1, 4, 2, 0],
  [3, 2, 0, 1, 4],
  [3, 2, 0, 4, 1],
  [3, 2, 1, 4, 0],
  [3, 2, 1, 0, 4],
  [3, 2, 4, 0, 1],
  [3, 2, 4, 1, 0],
  [3, 4, 0, 1, 2],
  [3, 4, 0, 2, 1],
  [3, 4, 1, 2, 0],
  [3, 4, 1, 0, 2],
  [3, 4, 2, 0, 1],
  [3, 4, 2, 1, 0],
  [4, 0, 1, 2, 3],
  [4, 0, 1, 3, 2],
  [4, 0, 2, 3, 1],
  [4, 0, 2, 1, 3],
  [4, 0, 3, 1, 2],
  [4, 0, 3, 2, 1],
  [4, 1, 0, 2, 3],
  [4, 1, 0, 3, 2],
  [4, 1, 2, 3, 0],
  [4, 1, 2, 0, 3],
  [4, 1, 3, 0, 2],
  [4, 1, 3, 2, 0],
  [4, 2, 0, 1, 3],
  [4, 2, 0, 3, 1],
  [4, 2, 1, 3, 0],
  [4, 2, 1, 0, 3],
  [4, 2, 3, 0, 1],
  [4, 2, 3, 1, 0],
  [4, 3, 0, 1, 2],
  [4, 3, 0, 2, 1],
  [4, 3, 1, 2, 0],
  [4, 3, 1, 0, 2],
  [4, 3, 2, 0, 1],
  [4, 3, 2, 1, 0]];

  for (let i = 0; i < combos.length; i++) {
    res.push(intcode5times(arr, combos[i]));
  }

  return Math.max(...res);
}

/* Helpers for 1st task */
let intcode5times = (arr, inputs) => {
  let a = intcode(arr, [inputs[0], 0]);
  let b = intcode(arr, [inputs[1], a]);
  let c = intcode(arr, [inputs[2], b]);
  let d = intcode(arr, [inputs[3], c]);
  return intcode(arr, [inputs[4], d]);
}


/************* SECOND TASK *************/
let second = (arr) => {

}

/* Helpers for 2nd task */



/* OUT */
console.log(`First answer: ${first(input.slice())}.`);
console.log(`Second answer: ${second(input.slice())}.`);

/*
Text:

*/